{"version":3,"file":"static/js/882.165b4c43.chunk.js","mappings":"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","sources":["validation/schemaContactForm.js","webpack://react-homework-template/./src/components/ContactsComponents/ContactComponent.module.css?c13b","components/ContactsComponents/ContactsForm.jsx","utils/stringToColor.js","utils/stringAvatar.js","components/ContactsComponents/ContactItem.jsx","components/ContactsComponents/ContactsList.jsx","components/Filter/Filter.jsx","webpack://react-homework-template/./src/pages/Contacts/ContactsPage.module.css?3d45","pages/Contacts/ContactsPage.jsx"],"sourcesContent":["import * as yup from 'yup';\n\nconst phoneRegex = RegExp(/^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/);\n\nexport const schemaContactForm = yup.object().shape({\n  name: yup\n    .string()\n    .required('This field is required')\n    .min(3, 'Enter more than 3 characters')\n    .max(25),\n  number: yup\n    .string()\n    .required('This field is required')\n    .matches(phoneRegex, 'Invalid phone'),\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactComponent_form__SGspF\",\"list\":\"ContactComponent_list__9UBMl\",\"item\":\"ContactComponent_item__OO6dT\",\"itemName\":\"ContactComponent_itemName__GldSA\",\"name\":\"ContactComponent_name__D4MQX\",\"btnDelete\":\"ContactComponent_btnDelete__Tguo5\"};","import { useDispatch, useSelector } from 'react-redux';\n\nimport { useFormik } from 'formik';\n\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport AbcIcon from '@mui/icons-material/Abc';\nimport AddIcCallIcon from '@mui/icons-material/AddIcCall';\n\nimport { addContactsThunk } from 'redux/contacts/thunk.contacts';\nimport { selectContacts } from 'redux/selectors';\n\nimport { schemaContactForm } from 'validation/schemaContactForm';\n\nimport s from '../ContactsComponents/ContactComponent.module.css';\n\nconst initialState = {\n  name: '',\n  number: '',\n};\n\nconst ContactsForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const formik = useFormik({\n    initialValues: initialState,\n    validationSchema: schemaContactForm,\n    validateOnBlur: false,\n    validateOnChange: false,\n    onSubmit: values => checkExistingContacts(values),\n  });\n\n  const { values, handleSubmit, handleChange, errors, resetForm } = formik;\n\n  const checkExistingContacts = values => {\n    const isExist = contacts.filter(el => values.name === el.name);\n    if (!!isExist.length) {\n      alert(`${values.name} is already in contacts`);\n    } else {\n      dispatch(addContactsThunk(values));\n      resetForm();\n    }\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <TextField\n        onChange={handleChange}\n        required\n        id=\"outlined-required\"\n        label=\"Name\"\n        margin=\"dense\"\n        type=\"text\"\n        name=\"name\"\n        value={values.name}\n        InputProps={{\n          startAdornment: <AbcIcon position=\"start\" color=\"action\" />,\n        }}\n      />\n      {errors.name && <p style={{ color: 'red' }}>{errors.name}</p>}\n      <TextField\n        onChange={handleChange}\n        required\n        id=\"outlined-required\"\n        label=\"Number\"\n        margin=\"dense\"\n        type=\"tel\"\n        name=\"number\"\n        value={values.number}\n        InputProps={{\n          startAdornment: <AddIcCallIcon position=\"start\" color=\"action\" />,\n        }}\n      />\n      {errors.number && <p style={{ color: 'red' }}>{errors.number}</p>}\n      <Button\n        type=\"submit\"\n        variant=\"contained\"\n        sx={{\n          width: 200,\n          marginTop: 1,\n        }}\n      >\n        Send\n      </Button>\n    </form>\n  );\n};\n\nexport default ContactsForm;\n","export function stringToColor(string) {\n  let hash = 0;\n  let i;\n\n  /* eslint-disable no-bitwise */\n  for (i = 0; i < string.length; i += 1) {\n    hash = string.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  let color = '#';\n\n  for (i = 0; i < 3; i += 1) {\n    const value = (hash >> (i * 8)) & 0xff;\n    color += `00${value.toString(16)}`.slice(-2);\n  }\n  /* eslint-enable no-bitwise */\n\n  return color;\n}\n","import { stringToColor } from './stringToColor';\n\nexport function stringAvatar(name) {\n  let children = name.split(' ');\n  if (children.length > 1) {\n    children = `${name.split(' ')[0][0]}${name.split(' ')[1][0]}`;\n  } else {\n    children = `${name.split(' ')[0][0]}`;\n  }\n  return {\n    sx: {\n      bgcolor: stringToColor(name),\n    },\n    children,\n  };\n}\n","import { useDispatch } from 'react-redux';\n\nimport { deleteContactsThunk } from 'redux/contacts/thunk.contacts';\n\nimport PropTypes from 'prop-types';\n\nimport Avatar from '@mui/material/Avatar';\nimport { stringAvatar } from 'utils/stringAvatar';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\n\nimport s from '../ContactsComponents/ContactComponent.module.css';\n\nconst ContactItem = ({ contact }) => {\n  const { id, name, number } = contact;\n\n  const dispatch = useDispatch();\n\n  return (\n    <li className={s.item}>\n      <div className={s.itemName}>\n        <Avatar {...stringAvatar(name)} />\n        <p className={s.name}>\n          {name} : {number}\n        </p>\n      </div>\n      <button\n        className={s.btnDelete}\n        onClick={() => dispatch(deleteContactsThunk(id))}\n        type=\"button\"\n      >\n        <DeleteForeverIcon\n          sx={{\n            cursor: 'pointer',\n            '&:hover': {\n              color: '#1765c0',\n            },\n          }}\n        />\n      </button>\n    </li>\n  );\n};\nexport default ContactItem;\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    phone: PropTypes.string,\n  }),\n};\n","import { useSelector } from 'react-redux';\n\nimport ContactItem from './ContactItem';\nimport { selectFiteredContacts } from 'redux/selectors';\n\nimport s from '../ContactsComponents/ContactComponent.module.css';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectFiteredContacts);\n  if (!contacts.length) return <p>Not found contacts</p>;\n  return (\n    <ul className={s.list}>\n      <h2>{contacts.length === 1 ? `Contact :` : `Contacts :`}</h2>\n      {contacts.map(contact => {\n        return <ContactItem key={contact.id} contact={contact} />;\n      })}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport { filterContact } from 'redux/filter/filterSlice';\nimport { selectFilter } from 'redux/selectors';\n\nimport { TextField } from '@mui/material';\nimport ManageSearchIcon from '@mui/icons-material/ManageSearch';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const filter = useSelector(selectFilter);\n\n  return (\n    <>\n      <h3>Find contacts by name</h3>\n\n      <TextField\n        onChange={({ target: { value } }) => dispatch(filterContact(value))}\n        required\n        label=\"Search\"\n        type=\"search\"\n        name=\"search\"\n        value={filter}\n        InputProps={{\n          startAdornment: <ManageSearchIcon position=\"start\" color=\"action\" />,\n        }}\n        sx={{\n          width: 350,\n          marginTop: 1,\n        }}\n      />\n    </>\n  );\n};\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"contacts__container\":\"ContactsPage_contacts__container__ssGd2\"};","import { getInfoUserThunk } from 'redux/auth/thunk.auth';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport ContactsForm from 'components/ContactsComponents/ContactsForm';\nimport ContactList from 'components/ContactsComponents/ContactsList';\nimport {\n  selectContacts,\n  selectTokenAuth,\n  selectNameAuth,\n} from 'redux/selectors';\nimport { token } from 'api';\nimport { getContactsThunk } from 'redux/contacts/thunk.contacts';\nimport Filter from 'components/Filter/Filter';\n\nimport s from '../Contacts/ContactsPage.module.css';\n\nconst ContactsPage = () => {\n  const currentToken = useSelector(selectTokenAuth);\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const name = useSelector(selectNameAuth);\n\n  useEffect(() => {\n    token.set(currentToken);\n    dispatch(getContactsThunk());\n    if (name) {\n      return;\n    } else {\n      dispatch(getInfoUserThunk());\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div className={s.contacts__container}>\n      <h1>Phonebook :</h1>\n      <ContactsForm />\n\n      {!!contacts.length && (\n        <>\n          {contacts.length > 1 && <Filter />}\n          <ContactList />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["phoneRegex","RegExp","schemaContactForm","yup","shape","name","required","min","max","number","matches","initialState","dispatch","useDispatch","contacts","useSelector","selectContacts","formik","useFormik","initialValues","validationSchema","validateOnBlur","validateOnChange","onSubmit","values","checkExistingContacts","handleSubmit","handleChange","errors","resetForm","filter","el","length","alert","addContactsThunk","className","s","TextField","onChange","id","label","margin","type","value","InputProps","startAdornment","Abc","position","color","style","AddIcCall","Button","variant","sx","width","marginTop","stringToColor","string","i","hash","charCodeAt","toString","slice","stringAvatar","children","split","bgcolor","contact","Avatar","onClick","deleteContactsThunk","DeleteForever","cursor","selectFiteredContacts","map","selectFilter","target","filterContact","ManageSearch","currentToken","selectTokenAuth","selectNameAuth","useEffect","token","getContactsThunk","getInfoUserThunk"],"sourceRoot":""}